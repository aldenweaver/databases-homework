package simpledb;

import java.io.Serializable;
import java.util.*;

/**
 * TupleDesc describes the schema of a tuple.
 */
public class TupleDesc implements Serializable {

    /**
     * A help class to facilitate organizing the information of each field in the record/row
     * 
     * Each TDItem is a field that can be used to build a definition of the table
     * */
    public static class TDItem implements Serializable {

        private static final long serialVersionUID = 1L;

        /**
         * The type of the field
         * */
        public final Type fieldType;
        
        /**
         * The name of the field
         * */
        public final String fieldName;

        public TDItem(Type t, String n) {
            this.fieldName = n;
            this.fieldType = t;
        }

        public String toString() {
            return fieldName + "(" + fieldType + ")";
        }
    }
    
    // An ArrayList of TDItems that describes this tuple
    public ArrayList <TDItem> descriptors;

    /**
     * @return
     *        An iterator which iterates over all the field TDItems
     *        that are included in this TupleDesc
     * */
    public Iterator<TDItem> iterator() {
    	return descriptors.iterator();
    }

    
    private static final long serialVersionUID = 1L;

    /**
     * Create a new TupleDesc with typeAr.length fields with fields of the
     * specified types, with associated named fields.
     * 
     * @param typeAr
     *            array specifying the number of and types of fields in this
     *            TupleDesc. It must contain at least one entry.
     * @param fieldAr
     *            array specifying the names of the fields. Note that names may
     *            be null.
     */
    public TupleDesc(Type[] typeAr, String[] fieldAr) {
    	descriptors = new ArrayList<TDItem>();
        for (int i = 0; i < typeAr.length; i++) {
        	for (int j = 0; j < fieldAr.length; j++) {
        		descriptors.add(new TDItem (typeAr[i], fieldAr[j]));
        	}
        }
    }
    

    /**
     * Constructor. Create a new tuple desc with typeAr.length fields with
     * fields of the specified types, with anonymous (unnamed) fields.
     * 
     * @param typeAr
     *            array specifying the number of and types of fields in this
     *            TupleDesc. It must contain at least one entry.
     */
    public TupleDesc(Type[] typeAr) {
    	descriptors = new ArrayList<TDItem>();
    	
    	for (int i = 0; i < typeAr.length - 1; i++) {
        	descriptors.add(new TDItem (typeAr[i], "NewName"));
    	}
    }
    

    /**
     * @return the number of fields in this TupleDesc
     */
    public int numFields() {
        return descriptors.size();
    }
    

    /**
     * Gets the (possibly null) field name of the ith field of this TupleDesc.
     * 
     * @param i
     *            index of the field name to return. It must be a valid index.
     * @return the name of the ith field
     * @throws NoSuchElementException
     *             if i is not a valid field reference.
     */
    public String getFieldName(int i) throws NoSuchElementException {
        return descriptors.get(i).fieldName;
    }
    

    /**
     * Gets the type of the ith field of this TupleDesc.
     * 
     * @param i
     *            The index of the field to get the type of. It must be a valid
     *            index.
     * @return the type of the ith field
     * @throws NoSuchElementException
     *             if i is not a valid field reference.
     */
    public Type getFieldType(int i) throws NoSuchElementException {
        return descriptors.get(i).fieldType;
    }
    

    /**
     * Find the index of the field with a given name.
     * 
     * @param name
     *            name of the field.
     * @return the index of the field that is first to have the given name.
     * @throws NoSuchElementException
     *             if no field with a matching name is found.
     */
    public int fieldNameToIndex(String name) throws NoSuchElementException {
        for (int i = 0; i < descriptors.size(); i++) {
        	if (descriptors.get(i).fieldName == name) {
        		return i;
        	}
        }
        throw new NoSuchElementException();
    }

    
    /**
     * @return The size (in bytes) of tuples corresponding to this TupleDesc.
     *         Note that tuples from a given TupleDesc are of a fixed size.
     */
    public int getSize() {
    	int totalSize = 0;
    	
    	for (int i = 0; i < descriptors.size(); i++) {
        	totalSize += descriptors.get(i).fieldType.getLen();
        }
        return totalSize;
    }

    /**
     * Merge two TupleDescs into one, with td1.numFields + td2.numFields fields,
     * with the first td1.numFields coming from td1 and the remaining from td2.
     * 
     * @param td1
     *            The TupleDesc with the first fields of the new TupleDesc
     * @param td2
     *            The TupleDesc with the last fields of the TupleDesc
     * @return the new TupleDesc
     */
    public static TupleDesc merge(TupleDesc td1, TupleDesc td2) {
    	Type[] typeAr = new Type[td1.numFields() + td2.numFields()];
    	String[] fieldAr = new String[td1.numFields() + td2.numFields()];
    	
    	int i = 0;
    	
    	while(i <= td1.numFields()) {
    		typeAr[i] = td1.descriptors.get(i).fieldType;
    		fieldAr[i] = td1.descriptors.get(i).fieldName;
    		i++;
        }
    	
    	while(i <= td1.numFields() + td2.numFields()) {
    		typeAr[i] = td2.descriptors.get(i).fieldType;
    		fieldAr[i] = td2.descriptors.get(i).fieldName;
    		i++;
        }
    	
        return new TupleDesc(typeAr, fieldAr);
    }
    
    
    
    // Returns true if the n-th type in one TupleDesc is equal to the n-th type in the other
    public boolean typesEqual(TupleDesc td1, TupleDesc td2) {
    	// Base Case 1: Either or both td1 & td2 have no fields
    	if(td1.numFields() == 0 | td2.numFields() == 0) {
    		return false;
    	}
    	
    	// Base Case 2: td1 & td2 have a different number of fields
    	if(td1.numFields() == 0 | td2.numFields() == 0) {
    		return false;
    	}
    	
    	// Iterate through the lists of descriptors and 
    	// if the n-th type in one TupleDesc is not equal to 
    	// the n-th type in the other, return false
    	for (int i = 0; i < td1.descriptors.size(); i++) {
    		for (int j = 0; j < td2.descriptors.size(); j++) {
    			if (td1.descriptors.get(i).fieldType != td2.descriptors.get(j).fieldType) {
    				return false;
    			}
    		}
        }
    	return true;
    }
    

    /**
     * Compares the specified object with this TupleDesc for equality. Two
     * TupleDescs are considered equal if they are the same size and if the n-th
     * type in this TupleDesc is equal to the n-th type in td.
     * 
     * @param o
     *            the Object to be compared for equality with this TupleDesc.
     * @return true if the object is equal to this TupleDesc.
     */
    public boolean equals(Object o) {
    	TupleDesc td = (TupleDesc)o;
        if((descriptors.size() == td.descriptors.size()) && typesEqual(this, td)) {
        	return true;
        }
        return false;
    }

    
// Not necessary to implement
    public int hashCode() {
        // If you want to use TupleDesc as keys for HashMap, implement this so
        // that equal objects have equals hashCode() results
        throw new UnsupportedOperationException("unimplemented");
    }

    /**
     * Returns a String describing this descriptor. It should be of the form
     * "fieldType[0](fieldName[0]), ..., fieldType[M](fieldName[M])", although
     * the exact format does not matter.
     * 
     * @return String describing this descriptor.
     */
    public String toString() {
        String descr = "";
        for (int i = 0; i < descriptors.size() - 1; i++) {
        	descr += descriptors.get(i).fieldType + "(" + descriptors.get(i).fieldName + "), ";
        }
        
        descr += descriptors.get(descriptors.size()).fieldType + "(" + descriptors.get(descriptors.size()).fieldName + ")";
        return descr;
    }
}
